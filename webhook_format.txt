This is documentation for the webhook format used in the local server.
Kenwood Harris Jr, Boston University V2 September 18 2017.

The local server accepts webhook requests from IOT devices. The server
currently handles HTTP requests only and compatibility for HTTPS is ongoing. The following
document outlines the client-server communication, request format, as well as required JSON structure.

#OVERVIEW---------------------------------------------------------------------------------------------

Conversations between the device and the server follow typical HTTP protocol, with
device acting as a client to the server. The Device sends two types of messages to
the server to act upon, POST, and GET. In both request methods a body
is required, with the data formatted to the required JSON detailed below. The Server
then returns a response to the device, despite the method called, again following
the pre-determined JSON structure.

#METHOD USAGE-----------------------------------------------------------------------------------------

Of the HTTP methods only two are accepted by the Server, POST, and GET.
Each of these methods has event-types that determine the action taken by the server. POST is the most
common use case, and will be used for ALL communication between device and Server.

The POST method is the most frequently used method when communicating with the server.
The POST method is used to update the server with device data (Such as generating deviceID's), reset devices,
set individual device data, and send unique commands. The POST method contains a body
of the require JSON structure, and in its nature does not require a response from a
server, however the server WILL respond, and response handling should be expected especially
when certain event-types are used.

The GET method is an important method for the control, and maintenance of the server and
device system. The GET method is important as it allows for non-sensor/posting devices to
control, and monitor the system. The GET method allows for the polling of data, with reference
to specific data types, times, and values, the export of log files and device information, resets,
and unique commands. The GET method request body requires the aforementioned JSON structure, and
WILL return a response to the device.

#HEADERS---------------------------------------------------------------------------------------------

The headers required of the device's HTTP message is the same across all method types.
They are as follows:
DATE: ""
CONTENT-TYPE: "application/json"

#JSON STRUCTURE AND EVENT-TYPES----------------------------------------------------------------------

All devices must submit requests with bodies following the JSON structure below, the
values given are descriptive, and not indicative of what the values may be.

{
  deviceID: "assigned by the server, when using CONNECT is empty"
  time: "this is the time of the sent request"
  event: {
    event-type: "The type of event goes here"
    parameters: []
         }
  deviceType: "The type of Device i.e. 'light sensor board' "
  SensorTypes: [sens1, sens2, sens3] "Enumeration of each sensor"
  SensorData: [sens1data, sens2data, sens3data] "Enumeration of the data taken"
  group: "has a group name or number that will allow multiple network groups"
  unique: {
    someuniquekey: someuniqueval   "passes values that user can define"
          }
}

Each JSON is required to have the above keys, although they do not have to be populated.
Event, event-type, and parameters are ALWAYS required as the determine server response.
Event-types drive the system and are integral to the multi-functionality of the server.
Below are the accepted event-types and their required methods, and parameters.
Event-types w/ required methods and param:
    connect: POST
    update: POST (sampletime)
    reset: POST, GET (DeviceID,DeviceType,sensorType,object)
    pull: GET (file,DeviceID,DeviceType,SensorType,time,object)
    set: POST, GET (DeviceID,DeviceType,SensorType)
    export: GET (to,deviceID,deviceType,sensorType,time,object)
    settings: GET, POST (deviceType,sensorType,values)
    unique: POST, GET (values)


#DATA LOGGING----------------------------------------------------------------------------------------

Data-logging occurs frequently in the system, and a file is opened every time a request is
received at the minimum. There are three master log files, which keep track of the requests.
They are the connectlog, postlog, and the getlog, and they record requests for redundancy.
Also whenever a device is initially requested it creates a file for each sensor on the board,
constructed of the deviceID plus the sensortype. When post commands are called, the sever
opens the pre-constructed files and appends to them, and GET methods export the file to
wherever the users specifies.



